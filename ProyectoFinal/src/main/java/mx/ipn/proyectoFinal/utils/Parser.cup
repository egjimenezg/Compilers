package mx.ipn.proyectoFinal.utils;
import java_cup.runtime.*;
import mx.ipn.proyectoFinal.domain.Query;

parser code
{: 
	private Query query;

	public void setQuery(Query query){
		this.query = query;
	}

	public Query getQuery(){
		return this.query;
	}
:}

terminal  	String TABLE;
terminal	PROYECCION,SELECCION,JOIN;
terminal	COMA,PUNTO,PAR_I,PAR_D;
terminal 	CAMPO;
terminal	String NUMBER;
terminal 	GT,GE,LT,LE,EQ,LIKE,NE;
terminal  	OR,AND,NOT;
terminal    CARTESIANO;

non terminal Rp;
non terminal String R;
non terminal condicion;
non terminal String expr;
non terminal listaCampos;
non terminal String campo;

precedence left GT,GE,LT,LE,EQ,LIKE,NE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left CARTESIANO;

start with Rp;

Rp ::= R{:	       
	        String query = "SELECT ";
	        int i;
	        if(parser.getQuery().getListaCampos().size() > 0){
	            query += parser.getQuery().getListaCampos().get(0);
	            for(i=1;i<parser.getQuery().getListaCampos().size();i++)
	        		query += "," + parser.getQuery().getListaCampos().get(i);
	        }
	        else
	        	query += " * ";

	        query += " FROM ";
	     
			query += parser.getQuery().getListaTablas().get(0);	            
	        for(i=1;i<parser.getQuery().getListaTablas().size();i++)
				query += "," + parser.getQuery().getListaTablas().get(i);	               

	        if(parser.getQuery().getListaCondiciones().size() > 0){
	            query += " WHERE ";
	            query += parser.getQuery().getListaCondiciones().get(0);
	            for(i=1;i<parser.getQuery().getListaCondiciones().size();i++)
	        		query += " AND " + parser.getQuery().getListaCondiciones().get(i);	        	
	        }

	        parser.getQuery().setFinalQuery(query);
	        
	   :};

R ::= TABLE:t
	  {:
	      if(!parser.getQuery().getListaTablas().contains(t))
	          parser.getQuery().getListaTablas().add(t);
	  :}
	  | SELECCION PAR_I R COMA condicion PAR_D
	  | PROYECCION PAR_I R COMA listaCampos PAR_D
	  | JOIN PAR_I R COMA R COMA condicion PAR_D
	  | R CARTESIANO R;

listaCampos ::= campo:c
					{: 
						if(!parser.getQuery().getListaCampos().contains(c))
							parser.getQuery().getListaCampos().add(c);	
					:}
			    | listaCampos COMA campo:c
			      	{:  	
			          if(!parser.getQuery().getListaCampos().contains(c))
			              parser.getQuery().getListaCampos().add(c);
			      	:};

condicion ::= expr:e
			   {:
			       if(!parser.getQuery().getListaCondiciones().contains(e))
				       parser.getQuery().getListaCondiciones().add(e);
			   :}
			 | expr:e1 OR expr:e2
			   {:
			       String aux = (String)e1 + " OR " + (String)e2;
			       if(!parser.getQuery().getListaCondiciones().contains(aux))
			           parser.getQuery().getListaCondiciones().add(aux);
			   :}
			 | expr:e1 AND expr:e2			   
			   {: 
			       String aux = (String)e1 + " AND " + (String)e2;

			       if(!parser.getQuery().getListaCondiciones().contains(aux))
			           parser.getQuery().getListaCondiciones().add(aux);

			   :}
			 | NOT expr:e
			   {:
			       String aux = " NOT " + (String)e;
			       if(!parser.getQuery().getListaCondiciones().contains(aux))
			           parser.getQuery().getListaCondiciones().add(aux);
			   :};

expr ::= expr:e1 GT expr:e2
			{: RESULT = e1 + " > " + e2; :}
		 | expr:e1 GE expr:e2
		 	{: RESULT = e1 + " >= " + e2; :}
		 | expr:e1 LT expr:e2
		 	{: RESULT = e1 + " < " + e2; :}
		 | expr:e1 LE expr:e2
		 	{: RESULT = e1 + " <= " + e2; :}
		 | expr:e1 EQ expr:e2
		 	{: RESULT = (String)e1 + " = " + (String)e2; :}
		 | expr:e1 LIKE expr:e2
		 	{: RESULT = e1 + " LIKE " + e2; :}
		 | expr:e1 NE expr:e2
		 	{: RESULT = e1 + " <> " + e2; :}
		 | PAR_I expr:e PAR_D
		 	{: RESULT = (String)e; :}
		 | NUMBER:n
		 	{: RESULT = (String)n; :}
		 | campo:c
		 	{: RESULT = (String)c; :};

campo ::= CAMPO:c
		    {:RESULT = (String)c; :}
		  | TABLE:table PUNTO CAMPO:campo
		  	{: RESULT = (String)table+"."+(String)campo; :};